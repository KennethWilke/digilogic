// This file was generated by gen.c from structdescs.h -- DO NOT EDIT

/*
   Copyright 2024 Ryan "rj45" Sanche

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef STRUCTS_H
#define STRUCTS_H

#include <stddef.h>
#include <stdint.h>

#include "handmade_math.h"

// An identifier indicating the type and location of something in a Circuit.
typedef uint32_t ID;

// An index of a ComponentDesc
typedef uint32_t ComponentDescID;

// A index of a PortDesc within a ComponentDesc.
typedef uint32_t PortDescID;

typedef ID ComponentID;
typedef ID NetID;
typedef ID PortID;
typedef ID EndpointID;
typedef ID WaypointID;
typedef ID LabelID;

// An index into the Circuit's Vertex array.
typedef uint32_t VertexIndex;

// An index into the Circuit's Wire array.
typedef uint32_t WireIndex;

// An axis aligned bounding box.
typedef struct Box {
  // The center of the axis aligned bounding box.
  HMM_Vec2 center;

  // The dimensions of the box from the center.
  HMM_Vec2 halfSize;
} Box;

// A wire connecting two points in a Net.
typedef struct Wire {
  // The number of Vertices in the Wire. The most significant bit is a flag
  // indicating whether the Wire has a junction.
  uint16_t vertexCount;
} Wire;

// Nothing.
typedef struct None {
  // Nothing (to fix a MSVC error).
  uint32_t nothing;
} None;

// A circuit component or gate.
typedef struct Component {
  // Bounding box of the Component.
  Box box;

  // The index of the ComponentDesc of the Component.
  ComponentDescID desc;

  // Head of a linked list of ports.
  PortID portFirst;

  // Tail of a linked list of ports.
  PortID portLast;

  // Label indicating the type of the component.
  LabelID typeLabel;

  // Label indicating the name of the component.
  LabelID nameLabel;
} Component;

// A module port or component pin.
typedef struct Port {
  // Position of the port relative to its component.
  HMM_Vec2 position;

  // ID of the Component the Port belongs to.
  ComponentID component;

  // The index of the PortDesc in the Component's PortDesc list.
  PortDescID desc;

  // The ID of the Label with the port's name.
  LabelID label;

  // The ID of the next Port in a linked list of the component's Ports.
  PortID next;

  // The ID of the previous Port in a linked list of the component's Ports.
  PortID prev;

  // The ID of the Net the Port is connected to.
  NetID net;

  // The ID of the Endpoint connected to this Port.
  EndpointID endpoint;
} Port;

// Represents a network of wires connecting Ports together.
typedef struct Net {
  // The ID of the first Endpoint in a linked list of the Net's Endpoints.
  EndpointID endpointFirst;

  // The ID of the last Endpoint in a linked list of the Net's Endpoints.
  EndpointID endpointLast;

  // The ID of the first Waypoint in a linked list of the Net's Waypoints.
  WaypointID waypointFirst;

  // The ID of the last Waypoint in a linked list of the Net's Waypoints.
  WaypointID waypointLast;

  // The ID of the Label with the net's name.
  LabelID label;

  // The index of the first Wire in the Circuit's Wire array.
  WireIndex wireOffset;

  // The number of Wires in the Net.
  uint32_t wireCount;

  // The index of the first Vertex in the Circuit's Vertex array.
  VertexIndex vertexOffset;
} Net;

// A connection point for a Net.
typedef struct Endpoint {
  // The position of the Endpoint.
  HMM_Vec2 position;

  // The ID of the Net the Endpoint is a part of.
  NetID net;

  // The ID of the Port the Endpoint is connected to.
  // This is optional, an endpoint may be floating.
  PortID port;

  // The ID of the next Endpoint in a linked list of the Net's Endpoints.
  EndpointID next;

  // The ID of the previous Endpoint in a linked list of the Net's Endpoints.
  EndpointID prev;
} Endpoint;

// A routing waypoint for influencing the autorouter.
typedef struct Waypoint {
  // The position of the Waypoint.
  HMM_Vec2 position;

  // The ID of the Net the Waypoint is a part of.
  NetID net;

  // The ID of the next Waypoint in a linked list of the Net's Waypoints.
  WaypointID next;

  // The ID of the previous Waypoint in a linked list of the Net's Waypoints.
  WaypointID prev;
} Waypoint;

// A label for a Componet, Port or Net.
typedef struct Label {
  // The bounding box of the text of the Label.
  Box box;

  // Offset into the Circuit's text array where the text of the Label starts.
  uint32_t textOffset;
} Label;

// A description of a struct for reflection.
typedef struct StructDesc {
  const char *name;
  size_t size;
  size_t numFields;
  size_t *offsets;
  size_t *sizes;
  const char **names;
  const char **types;
} StructDesc;

extern const StructDesc helperDescs[3];
extern const StructDesc structDescs[7];

#endif // STRUCTS_H
